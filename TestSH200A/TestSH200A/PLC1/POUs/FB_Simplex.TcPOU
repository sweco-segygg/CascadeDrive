<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_Simplex" Id="{668ab83c-799c-4a0b-96ba-50b562212dee}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Simplex
VAR
	(* Stored Motor Parameters *)
	bWriteData	: BOOL;

	nTorqueLimit		: INT  := 3; // TorqueLimit for the motor  
	rM_SetPointSpeed	: REAL := 10;		 // Setpoint from user (cmm/s) 
	unControlOption		: UINT := 32;
	
	dnCenterPosition	: DINT;
	dnCCVEndPosition	: DINT := -200000;
	dnCVEndPosition		: DINT := 200000;

	dnPosRegMSB			: DINT;
	dnPosRegLSB			: DINT;
	
	fbModbusRTUMaster 	: MODbusRtuMaster_KL6x22B;
		unVersionNumber		: UINT;
		bMBAddress			: BYTE;
		unQuantity			: UINT; 
		unMBAddr			: UINT;
		unDataLength		: UINT;
		bStartReading		: BOOL;
		unTimeOut			: TIME := T#5S;	
		bBusy				: BOOL;
		bError				: BOOL;
		unErrorID			: UINT;
		unReadBytes			: UINT;
		lnPosition			: LINT;
		SPosition			: DINT;
		nCurr				: INT; // Read register 223	
	stSimplex_SetPosition	: ST_Simplex_SetPosition();	
	stSimplex_Jog			: ST_Simplex_Jog();
	stSimplex_Stop			: ST_Simplex_Stop();
	stSimplex_Reset			: ST_Simplex_Reset();
	stSimplex_Halt			: ST_Simplex_Halt();
	stLoggedValues			: ST_LoggedValues();
	dnRedMSB: BYTE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*		fbModbusRTUMaster(	UnitID   := 1,
						  	Quantity := 2,
							MBAddr	 := 200,
							cbLength := 4,
							pMemoryAddr := ADR(lnPosition),
							Execute		:= bWriteData, 
							TimeOut		:= T#5S, 
							Busy		=> bBusy, 
							Error		=> bError,
							ErrorId		=> unErrorID,
							cbRead		=> unReadBytes);		
		fbModbusRTUMaster.ReadRegs();
 *)
 (*
 	fbModbusRTUMaster(	UnitID   := 1,
					  	Quantity := 1,
						MBAddr	 := 449,
						cbLength := 16,
						pMemoryAddr := ADR(dnPosRegMsb),
						Execute		:= bWriteData, 
						TimeOut		:= T#5S, 
						Busy		=> bBusy, 
						Error		=> bError,
						ErrorId		=> unErrorID,
						cbRead		=> unReadBytes);		
	fbModbusRTUMaster.WriteRegs();
*)	
	]]></ST>
    </Implementation>
    <Folder Name="Scaling" Id="{1d439a6b-5024-48bb-868f-a4701606a7fd}" />
    <Method Name="M_checkNC_settings" Id="{cfbd57d8-d8ed-43d8-a0a0-ea06701a4dc3}">
      <Declaration><![CDATA[{warning 'add method implementation'}
METHOD M_checkNC_settings : BOOL
VAR_INPUT
	//AXIS_REF	: REFERENCE TO Tc2_MC2.AXIS_REF;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Jog" Id="{79f88ce3-dc88-4de6-919b-8d632ea73062}">
      <Declaration><![CDATA[METHOD M_Jog : BOOL
VAR_INPUT
END_VAR
VAR
	bWrite 	: BOOL;	// Write command to Simplex motor
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stSimplex_Jog.bActive THEN
	stSimplex_Jog.bWriteControlOption := TRUE;
	stSimplex_Jog.bActive := FALSE;
	stSimplex_Jog.bBusy := TRUE;
END_IF

// State to send setpoint velocity to SH200A
IF stSimplex_Jog.bWriteControlOption THEN
	stSimplex_Jog.fbTimerWriteModbus(PT := T#200MS);
	stSimplex_Jog.fbTimerWriteModbus(IN := TRUE);
	IF stSimplex_Jog.fbTimerWriteModbus.Q THEN
		bWrite := TRUE;
		fbModbusRTUMaster(	UnitID   := 1,
						  	Quantity := 1,
							MBAddr	 := 399,
							cbLength := 2,
							pMemoryAddr := ADR(stSimplex_Jog.nControlSetting),
							Execute		:= bWrite, 
							TimeOut		:= T#5S, 
							Busy		=> bBusy, 
							Error		=> bError,
							ErrorId		=> unErrorID,
							cbRead		=> unReadBytes);		
		stSimplex_Jog.bWriteControlOption := FALSE; 
		stSimplex_Jog.bWriteSetPointSpeed := TRUE;
		stSimplex_Jog.fbTimerWriteModbus(IN := FALSE);
	ELSE
		bWrite := FALSE;
		fbModbusRTUMaster(Execute := FALSE);
	END_IF	
	fbModbusRTUMaster.WriteSingleRegister();
	

// State to send control option to SH200A
ELSIF stSimplex_Jog.bWriteSetpointSpeed THEN 
	IF stSimplex_Jog.bSettingsDone THEN
		stSimplex_Jog.bJogForward 			:= TRUE;
		stSimplex_Jog.bSendPosition_LSB 	:= TRUE; 
		stSimplex_Jog.bSendPosition_MSB 	:= TRUE; 
		stSimplex_Jog.bWriteSetPointSpeed 	:= FALSE;
		stSimplex_Jog.bSettingsDone			:= FALSE;
	END_IF
		
	stSimplex_Jog.fbTimerWriteModbus(PT := T#200MS);
	stSimplex_Jog.fbTimerWriteModbus(IN := TRUE);
	stSimplex_Jog.nMaxVelocity := M_MM_TO_SPEED(rMM_SetPoint := rM_SetPointSpeed);
	
	IF stSimplex_Jog.fbTimerWriteModbus.Q THEN
		bWrite := TRUE;
		fbModbusRTUMaster( UnitID   	:= 1,
						   quantity 	:= 1,
						   MBAddr	 	:= 350,
						   cbLength 	:= 2,
						   pMemoryAddr 	:= ADR(stSimplex_Jog.nMaxVelocity),
						   Execute		:= bWrite, 
						   TimeOut		:= T#5S, 
						   Busy			=> bBusy, 
						   Error		=> bError,
						   ErrorId		=> unErrorID,
						   cbRead		=> unReadBytes);	
		stSimplex_Jog.fbTimerWriteModbus(IN := FALSE);
		stSimplex_Jog.bSettingsDone := TRUE;
	ELSE
		bWrite := FALSE;
		fbModbusRTUMaster(Execute := FALSE);
	END_IF
	fbModbusRTUMaster.WriteSingleRegister();
(* STATE 3: JOGGING FORWARD*)
ELSIF stSimplex_Jog.bJogForward THEN
	// Data formatting for Modbus (protcol is broken in the motor)
	dnPosRegMSB := (dnCVEndPosition AND 2#11111111111111110000000000000000);
	dnPosRegLSB := (dnCVEndPosition AND 2#00000000000000001111111111111111);
	
	// If we are done with set-up of new set point read the position for the motor
	IF stSimplex_Jog.bReadPosition THEN
		// Read position from motor
		bWrite := TRUE;
		fbModbusRTUMaster( 	UnitID   	:= 1,
					  		Quantity 	:= 2,
					   		MBAddr	 	:= 200,
					   		cbLength 	:= 4,
					   		pMemoryAddr := ADR(stSimplex_Jog.dnPosition),
					   		Execute		:= bWrite, 
					   		TimeOut		:= T#5S, 
					   		Busy		=> bBusy, 
					   		Error		=> bError,
					   		ErrorId		=> unErrorID,
					   		cbRead		=> unReadBytes);		
		stSimplex_Jog.fbTimerWriteModbus(IN := FALSE);
		fbModbusRTUMaster.ReadRegs();
		IF NOT(bBusy) AND unReadBytes <> 0 THEN
			bWrite := FALSE;
			fbModbusRTUMaster.Execute := FALSE;
		END_IF
	END_IF
	
	IF stSimplex_Jog.bSendPosition_LSB AND stSimplex_Jog.bSendPosition_MSB THEN
		stSimplex_Jog.fbTimerWriteModbus(PT := T#10MS);
		stSimplex_Jog.fbTimerWriteModbus(IN := TRUE);
		
		IF stSimplex_Jog.fbTimerWriteModbus.Q THEN
			fbModbusRTUMaster(	UnitID   := 1,
								Quantity := 1,
								MBAddr	 := 449,
								cbLength := 16,
								pMemoryAddr := ADR(dnPosRegMSB),
								Execute		:= bWrite, 
								TimeOut		:= T#5S, 
								Busy		=> bBusy, 
								Error		=> bError,
								ErrorId		=> unErrorID,
								cbRead		=> unReadBytes);		
			fbModbusRTUMaster.WriteRegs();
			StSimplex_Jog.bSendPosition_MSB := FALSE;
			stSimplex_Jog.fbTimerWriteModbus(IN := FALSE);
		ELSE
			bWrite := FALSE;
			fbModbusRTUMaster(Execute := FALSE);
		END_IF
	ELSIF NOT(stSimplex_Jog.bSendPosition_MSB) AND stSimplex_Jog.bSendPosition_LSB THEN
		stSimplex_Jog.fbTimerWriteModbus(PT := T#10MS);
		stSimplex_Jog.fbTimerWriteModbus(IN := TRUE);
		
		IF stSimplex_Jog.fbTimerWriteModbus.Q THEN
			bWrite := TRUE;
			fbModbusRTUMaster(	UnitID   := 1,
								Quantity := 1,
								MBAddr	 := 450,
								cbLength := 16,
								pMemoryAddr := ADR(dnPosRegLSB),
								Execute		:= bWrite, 
								TimeOut		:= T#5S, 
								Busy		=> bBusy, 
								Error		=> bError,
								ErrorId		=> unErrorID,
								cbRead		=> unReadBytes);		
			fbModbusRTUMaster.WriteRegs();
			StSimplex_Jog.bSendPosition_LSB := FALSE;	
			stSimplex_Jog.fbTimerWriteModbus(IN := FALSE);
		ELSE
			bWrite := FALSE;
			fbModbusRTUMaster(Execute := FALSE);
		END_IF
	ELSIF NOT(stSimplex_Jog.bSendPosition_MSB) AND NOT(stSimplex_Jog.bSendPosition_LSB) THEN
		fbModbusRTUMaster.WriteRegs();
		stSimplex_Jog.bReadPosition := TRUE;
	END_IF		

	IF stSimplex_Jog.dnPosition >= dnCVEndPosition THEN
		stSimplex_Jog.bJogForward		:= FALSE;
		stSimplex_Jog.bJogBackwards 	:= TRUE;
		stSimplex_Jog.bReadPosition 	:= FALSE;
		stSimplex_Jog.bSendPosition_LSB := TRUE;
		stSimplex_Jog.bSendPosition_MSB := TRUE;
		fbModbusRTUMaster.Execute 		:= FALSE;
	END_IF

(* STATE 4: JOGGING BACKWARDS*)
ELSIF stSimplex_Jog.bJogBackwards THEN
	dnPosRegMSB := (dnCCVEndPosition AND 2#11111111111111110000000000000000);
	dnPosRegLSB := (dnCCVEndPosition AND 2#00000000000000001111111111111111);
	
	// Read the position of the motor (True if we are done with the set-up)
	IF stSimplex_Jog.bReadPosition THEN
		// Read position from motor
		bWrite := TRUE;
		fbModbusRTUMaster( 	UnitID   	:= 1,
					  		Quantity 	:= 2,
					   		MBAddr	 	:= 200,
					   		cbLength 	:= 4,
					   		pMemoryAddr := ADR(stSimplex_Jog.dnPosition),
					   		Execute		:= bWrite, 
					   		TimeOut		:= T#5S, 
					   		Busy		=> bBusy, 
					   		Error		=> bError,
					   		ErrorId		=> unErrorID,
					   		cbRead		=> unReadBytes);		
		fbModbusRTUMaster.ReadRegs();
		IF NOT(bBusy) AND unReadBytes <> 0 THEN
			bWrite := FALSE;
			fbModbusRTUMaster.Execute := FALSE;
		END_IF
	END_IF		
	
	IF stSimplex_Jog.bSendPosition_LSB AND stSimplex_Jog.bSendPosition_MSB THEN
		stSimplex_Jog.fbTimerWriteModbus(PT := T#10MS);
		stSimplex_Jog.fbTimerWriteModbus(IN := TRUE);
		
		IF stSimplex_Jog.fbTimerWriteModbus.Q THEN
			fbModbusRTUMaster(	UnitID   := 1,
								Quantity := 1,
								MBAddr	 := 449,
								cbLength := 16,
								pMemoryAddr := ADR(dnPosRegMSB),
								Execute		:= bWrite, 
								TimeOut		:= T#5S, 
								Busy		=> bBusy, 
								Error		=> bError,
								ErrorId		=> unErrorID,
								cbRead		=> unReadBytes);
			stSimplex_Jog.fbTimerWriteModbus(IN := FALSE);
			fbModbusRTUMaster.WriteRegs();
			StSimplex_Jog.bSendPosition_MSB := FALSE;
		ELSE
			bWrite := FALSE;
			fbModbusRTUMaster(Execute := FALSE);
		END_IF
	ELSIF NOT(stSimplex_Jog.bSendPosition_MSB) AND stSimplex_Jog.bSendPosition_LSB THEN	
		stSimplex_Jog.fbTimerWriteModbus(PT := T#10MS);
		stSimplex_Jog.fbTimerWriteModbus(IN := TRUE);
		
		IF stSimplex_Jog.fbTimerWriteModbus.Q THEN
			bWrite := TRUE;
			fbModbusRTUMaster(	UnitID   := 1,
								Quantity := 1,
								MBAddr	 := 450,
								cbLength := 16,
								pMemoryAddr := ADR(dnPosRegLSB),
								Execute		:= bWrite, 
								TimeOut		:= T#5S, 
								Busy		=> bBusy, 
								Error		=> bError,
								ErrorId		=> unErrorID,
								cbRead		=> unReadBytes);
			stSimplex_Jog.fbTimerWriteModbus(IN := FALSE);		
			fbModbusRTUMaster.WriteRegs();
			StSimplex_Jog.bSendPosition_LSB := FALSE;	
		ELSE
			bWrite := FALSE;
			fbModbusRTUMaster(Execute := FALSE);
		END_IF
	ELSIF NOT(stSimplex_Jog.bSendPosition_MSB) AND NOT(stSimplex_Jog.bSendPosition_LSB) THEN
		fbModbusRTUMaster.WriteRegs();
		stSimplex_Jog.bReadPosition := TRUE;
	END_IF
	
	IF stSimplex_Jog.dnPosition >= dnCCVEndPosition THEN
		stSimplex_Jog.bJogForward		:= TRUE;
		stSimplex_Jog.bJogBackwards 	:= FALSE;
		stSimplex_Jog.bReadPosition 	:= FALSE;
		stSimplex_Jog.bSendPosition_LSB := TRUE;
		stSimplex_Jog.bSendPosition_MSB := TRUE;
		fbModbusRTUMaster.Execute 		:= FALSE;
	END_IF	
END_IF

IF stSimplex_Jog.bDone OR stSimplex_Jog.bCommandAborted THEN
	stSimplex_Jog.bJogForward			:= FALSE;
	stSimplex_Jog.bJogBackwards 		:= FALSE;
	stSimplex_Jog.bWriteSetpointSpeed 	:= FALSE;
	stSimplex_Jog.bWriteControlOption 	:= FALSE;
	stSimplex_Jog.bBusy   				:= FALSE;
	stSimplex_Jog.bActive 				:= FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_LogValues" Id="{29f4707f-0732-49c7-9c02-bbb745d728e4}">
      <Declaration><![CDATA[METHOD M_LogValues : BOOL
VAR_INPUT
	//AXIS_REF	: REFERENCE TO Tc2_MC2.AXIS_REF;
END_VAR
VAR
	nValue : INT;
	nReadBytes : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
IF NOT(bBusy) THEN
	fbModbusRTUMaster(	UnitID   := 1,
					  	Quantity := 1,
						MBAddr	 := 208,
						cbLength := 2,
						pMemoryAddr := ADR(nValue),
						Execute		:= TRUE, 
						TimeOut		:= T#5S, 
						Busy		=> bBusy, 
						Error		=> bError,
						ErrorId		=> unErrorID,
						cbRead		=> nReadBytes);		
	fbModbusRTUMaster.WriteSingleRegister();
END_IF
IF nReadBytes <> 0 THEN
	stLoggedValues.nMotorFluxVoltage := nValue;
END_IF
*)
// Typiskt är 50/200 mm per varv = 0.25 mm per varv 

// 400, uint, värde 32 är speed control för position (Håll en viss fart till position är uppnått) 




// 340, int, unit is positions per second / 16, 0..25600
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_MM_TO_SPEED" Id="{25a2b7af-bf4e-4298-978e-f415ad9bce76}" FolderPath="Scaling\">
      <Declaration><![CDATA[METHOD M_MM_TO_SPEED : INT;
VAR_INPUT
	rMM_SetPoint : REAL; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_MM_TO_SPEED := REAL_TO_INT(rMM_Setpoint*256*0.25);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ResetDrive" Id="{f639bab4-0de1-4dd6-8ddf-997fbfefdbe5}">
      <Declaration><![CDATA[{warning 'add method implementation'}
METHOD M_ResetDrive : BOOL
VAR_INPUT
	//AXIS_REF	: REFERENCE TO Tc2_MC2.AXIS_REF;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetPositionOffset" Id="{8d951990-4f16-45c3-85b6-58c87d8d0b97}">
      <Declaration><![CDATA[{warning 'add method implementation'}
METHOD M_SetPositionOffset : BOOL
VAR_INPUT
	//AXIS_REF	: REFERENCE TO Tc2_MC2.AXIS_REF;
END_VAR
VAR
	//stMC_SetPosition : ST_MC_SetPosition;
END_VAR
VAR CONSTANT
	// Variables for calculation of the speed
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//stMC_Setposition.bExecute := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetSpeed" Id="{2d9fd325-2eed-4646-ad15-d3444a3ac3e2}">
      <Declaration><![CDATA[METHOD M_SetSpeed : BOOL
VAR_INPUT
	//AXIS_REF	: REFERENCE TO Tc2_MC2.AXIS_REF;
END_VAR
VAR
	bState1 	: BOOL; // Write setpoint
	bState2		: BOOL; // Start moving 
	bState3		: BOOL; // Error or end position reach 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Typiskt är 50/200 mm per varv = 0.25 mm per varv 

// 400, uint, värde 32 är speed control för position (Håll en viss fart till position är uppnått) 




// 340, int, unit is positions per second / 16, 0..25600
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetTorqueLimit" Id="{dd7800fe-2de1-43a4-a1b9-9af2c8ecf0d5}">
      <Declaration><![CDATA[{warning 'add method implementation'}
METHOD M_SetTorqueLimit : BOOL
VAR_INPUT
	//AXIS_REF	: REFERENCE TO Tc2_MC2.AXIS_REF;
END_VAR
VAR_OUTPUT
	bQued	: BOOL;	
END_VAR
VAR
	bBusy 		: BOOL;
	bExecute	: BOOL;
	bError		: BOOL;
	unErrorID	: UINT; 
	nReadBytes	: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*// Write register 203!! 
fbModbusRTUMaster(	UnitID   := 1,
				  	Quantity := 1,
					MBAddr	 := 204,
					cbLength := 1,
					pMemoryAddr := ADR(nTorqueLimit),
					Execute		:= TRUE, 
					TimeOut		:= T#5S, 
					Busy		=> bBusy, 
					Error		=> bError,
					ErrorId		=> unErrorID,
					cbRead		=> nReadBytes);
				

IF NOT(bBusy) THEN
	fbModbusRTUMaster.WriteSingleRegister();
	bQued	:= FALSE;
ELSE
	bQued	:= TRUE;
END_IF
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetZeroRef" Id="{86ea4837-fbd4-4612-ad57-497cb308b485}">
      <Declaration><![CDATA[METHOD M_SetZeroRef : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Simplex">
      <LineId Id="40" Count="10" />
      <LineId Id="60" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="99" Count="9" />
      <LineId Id="145" Count="0" />
      <LineId Id="154" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Simplex.M_checkNC_settings">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Simplex.M_Jog">
      <LineId Id="60" Count="0" />
      <LineId Id="592" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="528" Count="1" />
      <LineId Id="505" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="510" Count="10" />
      <LineId Id="526" Count="0" />
      <LineId Id="525" Count="0" />
      <LineId Id="527" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="523" Count="1" />
      <LineId Id="507" Count="0" />
      <LineId Id="577" Count="0" />
      <LineId Id="669" Count="0" />
      <LineId Id="671" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="872" Count="0" />
      <LineId Id="875" Count="5" />
      <LineId Id="882" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="575" Count="0" />
      <LineId Id="537" Count="1" />
      <LineId Id="574" Count="0" />
      <LineId Id="560" Count="8" />
      <LineId Id="789" Count="0" />
      <LineId Id="553" Count="0" />
      <LineId Id="793" Count="0" />
      <LineId Id="554" Count="3" />
      <LineId Id="869" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="870" Count="0" />
      <LineId Id="578" Count="1" />
      <LineId Id="845" Count="0" />
      <LineId Id="867" Count="0" />
      <LineId Id="846" Count="20" />
      <LineId Id="597" Count="0" />
      <LineId Id="601" Count="0" />
      <LineId Id="605" Count="0" />
      <LineId Id="603" Count="0" />
      <LineId Id="627" Count="0" />
      <LineId Id="606" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="615" Count="10" />
      <LineId Id="628" Count="0" />
      <LineId Id="795" Count="0" />
      <LineId Id="607" Count="0" />
      <LineId Id="609" Count="0" />
      <LineId Id="626" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="611" Count="0" />
      <LineId Id="642" Count="3" />
      <LineId Id="650" Count="13" />
      <LineId Id="796" Count="0" />
      <LineId Id="646" Count="0" />
      <LineId Id="648" Count="1" />
      <LineId Id="647" Count="0" />
      <LineId Id="613" Count="0" />
      <LineId Id="666" Count="1" />
      <LineId Id="602" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="699" Count="2" />
      <LineId Id="413" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="596" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="580" Count="0" />
      <LineId Id="702" Count="0" />
      <LineId Id="823" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="825" Count="19" />
      <LineId Id="824" Count="0" />
      <LineId Id="704" Count="15" />
      <LineId Id="798" Count="0" />
      <LineId Id="720" Count="22" />
      <LineId Id="799" Count="0" />
      <LineId Id="743" Count="9" />
      <LineId Id="822" Count="0" />
      <LineId Id="774" Count="7" />
      <LineId Id="38" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="279" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Simplex.M_LogValues">
      <LineId Id="52" Count="0" />
      <LineId Id="28" Count="12" />
      <LineId Id="25" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="10" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Simplex.M_MM_TO_SPEED">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Simplex.M_ResetDrive">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Simplex.M_SetPositionOffset">
      <LineId Id="19" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Simplex.M_SetSpeed">
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="21" Count="2" />
      <LineId Id="15" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Simplex.M_SetTorqueLimit">
      <LineId Id="27" Count="7" />
      <LineId Id="36" Count="2" />
      <LineId Id="35" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="53" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Simplex.M_SetZeroRef">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>